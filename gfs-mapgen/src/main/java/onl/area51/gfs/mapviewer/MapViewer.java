/*
 * Copyright 2015 peter.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package onl.area51.gfs.mapviewer;

import onl.area51.mapgen.swing.TilePanel;
import onl.area51.mapgen.tilecache.MapTileServer;
import javax.swing.JList;
import javax.swing.SwingUtilities;
import onl.area51.gfs.grib2.section.DataSet;
import onl.area51.gfs.grib2.section.Identification;
import onl.area51.gfs.grib2.section.SectionType;
import onl.area51.gfs.grib2.section.product.AbstractForecastProduct;
import onl.area51.gfs.grib2.section.product.ProductDefinition;
import onl.area51.gfs.mapviewer.action.ImportGribAction;
import onl.area51.gfs.mapviewer.action.OpenGribAction;
import onl.area51.gfs.mapviewer.action.QuitAction;
import onl.area51.mapgen.renderers.TileRenderer;
import onl.area51.mapgen.swing.LayerListModel;
import onl.area51.mapgen.swing.SwingUtils;
import onl.area51.mapgen.tilecache.BaseLayers;

/**
 *
 * @author peter
 */
public class MapViewer
        extends javax.swing.JFrame
{

    private final LayerListModel baseLayerModel;
    private final TilePanel mapPanel;

    /**
     * Creates new form MapViewer
     */
    public MapViewer()
    {
        initComponents();

        mapPanel = new TilePanel();
        mapScrollPane.setViewportView( mapPanel );
        invalidate();

        mapPanel.setMapNotifier( Main::setStatus );

        baseLayerModel = new LayerListModel( new BaseLayers( s -> new TileRenderer( s, e -> repaint() ) ) );
        baseLayers.setModel( baseLayerModel );
        mapPanel.setRenderer( baseLayerModel );

        baseLayers.addListSelectionListener( e -> {
            if( !e.getValueIsAdjusting() ) {
                int sel = baseLayers.getSelectedIndex();
                baseLayerModel.forEach( l -> l.setEnabled( false ) );
                baseLayerModel.get( sel ).setEnabled( true );
                mapPanel.repaintMap();
            }
        } );

        SwingUtils.invokeLater( () -> {
            baseLayers.setSelectedIndex( 0 );
            //  ddMapLayer.setSelectedItem( MapTileServer.OPEN_STREET_MAP );
            SwingUtils.invokeLater( () -> {
                MapPresets preset = MapPresets.WEST_EUROPE_ATLANTIC;
                mapPanel.setZoom( preset.getZoom() );
                sliderZoom.setValue( preset.getZoom() );
                mapPanel.setPreset( preset );
                SwingUtils.invokeLater( this::invalidate );
            } );
        } );
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ddMapLayer = new javax.swing.JComboBox();
        labZoom = new javax.swing.JLabel();
        sliderZoom = new javax.swing.JSlider();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        baseLayers = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataSets = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labDataId = new javax.swing.JLabel();
        labTimestamp = new javax.swing.JLabel();
        labTypeOfData = new javax.swing.JLabel();
        labDataType = new javax.swing.JLabel();
        labNoPoints = new javax.swing.JLabel();
        mapScrollPane = new javax.swing.JScrollPane();
        status = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        gribAction = new javax.swing.JMenuItem();
        importAction = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Available DataSets"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 674, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Grib2 Viewer");
        setMinimumSize(new java.awt.Dimension(748, 508));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        ddMapLayer.setModel(MapTileServer.newComboBoxModel());
        ddMapLayer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ddMapLayerActionPerformed(evt);
            }
        });

        labZoom.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labZoom.setText("00");

        sliderZoom.setMaximum(18);
        sliderZoom.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                sliderZoomStateChanged(evt);
            }
        });
        sliderZoom.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                sliderZoomMouseReleased(evt);
            }
        });

        jSplitPane1.setDividerLocation(300);

        baseLayers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        baseLayers.setCellRenderer(new BaseLayerCellRenderer());
        baseLayers.setSelectedIndex(0);
        jScrollPane2.setViewportView(baseLayers);

        jTabbedPane1.addTab("Base Layers", jScrollPane2);

        dataSets.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dataSets.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                dataSetsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(dataSets);

        jTabbedPane1.addTab("GRIB Layers", jScrollPane1);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("DataSet ID");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Timestamp");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Type of Data");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Data Type");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("No of Points");

        labDataId.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        labTimestamp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        labTypeOfData.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        labDataType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        labNoPoints.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labDataId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labNoPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labTimestamp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labTypeOfData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labDataType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labDataId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labTimestamp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labTypeOfData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labDataType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(labNoPoints))
                .addContainerGap(536, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Details", jPanel1);

        jSplitPane1.setLeftComponent(jTabbedPane1);
        jSplitPane1.setRightComponent(mapScrollPane);

        status.setText(" ");
        status.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBox1.setModel(onl.area51.gfs.mapviewer.MapPresets.getComboBoxModel());
        jComboBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox1ActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        gribAction.setAction(OpenGribAction.getInstance());
        jMenu3.add(gribAction);

        importAction.setAction(ImportGribAction.getInstance());
        importAction.setText("jMenuItem1");
        jMenu3.add(importAction);
        jMenu3.add(jSeparator1);

        exitItem.setAction(new QuitAction());
        jMenu3.add(exitItem);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("View");

        jCheckBoxMenuItem1.setText("Show Tile Grid");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem1);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ddMapLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 494, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ddMapLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderZoomStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderZoomStateChanged
    {//GEN-HEADEREND:event_sliderZoomStateChanged
        int zoom = sliderZoom.getValue();
        if( zoom != mapPanel.getZoom() ) {
            mapPanel.setZoom( zoom );
            labZoom.setText( String.valueOf( zoom ) );
        }
    }//GEN-LAST:event_sliderZoomStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        //ddMapLayer.setSelectedItem( TileCache.INSTANCE.getServer() );
        sliderZoom.setValue( mapPanel.getZoom() );
        mapPanel.repaintMap();
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox1ActionPerformed
    {//GEN-HEADEREND:event_jComboBox1ActionPerformed
        MapPresets preset = (MapPresets) jComboBox1.getSelectedItem();
        if( preset != null && preset != MapPresets.UNSET ) {
            mapPanel.setZoom( preset.getZoom() );
            sliderZoom.setValue( preset.getZoom() );
            mapPanel.setPreset( preset );
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void sliderZoomMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sliderZoomMouseReleased
    {//GEN-HEADEREND:event_sliderZoomMouseReleased
        mapPanel.repaintMap();
    }//GEN-LAST:event_sliderZoomMouseReleased

    private void ddMapLayerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ddMapLayerActionPerformed
    {//GEN-HEADEREND:event_ddMapLayerActionPerformed
        MapTileServer server = (MapTileServer) ddMapLayer.getSelectedItem();
        if( server != null ) {
            //TileCache.INSTANCE.setServer( server );
            int zoom = sliderZoom.getValue();
            int newZoom = Math.min( Math.max( zoom, server.getMinZoom() ), server.getMaxZoom() );
            if( zoom != newZoom ) {
                mapPanel.setZoom( zoom );
                sliderZoom.setValue( zoom );
            }
            mapPanel.repaintMap();
        }
    }//GEN-LAST:event_ddMapLayerActionPerformed

    private void dataSetsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_dataSetsValueChanged
    {//GEN-HEADEREND:event_dataSetsValueChanged
        DataSet set = (DataSet) dataSets.getSelectedValue();
        if( set != null ) {
            SwingUtilities.invokeLater( () -> {
                Identification id = set.get( SectionType.IDENTIFICATION );
                labDataId.setText( String.valueOf( id.getId() ) );
                labTimestamp.setText( id.getDateTime().toString() );

                ProductDefinition prodDef = set.get( SectionType.PRODUCT_DEFINITION );
                labTypeOfData.setText( prodDef.getTemplate().name() );

                if( prodDef instanceof AbstractForecastProduct ) {
                    AbstractForecastProduct p = (AbstractForecastProduct) prodDef;
                    labNoPoints.setText( String.valueOf( p.getNoCoordAfterTemplate() ) );
                }
                else {
                    labNoPoints.setText( "??" );
                }
            } );
        }
    }//GEN-LAST:event_dataSetsValueChanged

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxMenuItem1ActionPerformed
        boolean selected = jCheckBoxMenuItem1.isSelected();
        if( selected != mapPanel.isShowGrid() ) {
            SwingUtilities.invokeLater( () -> {
                mapPanel.setShowGrid( selected );
                mapPanel.repaint();
            } );
        }

    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    public JList getDataSets()
    {
        return dataSets;
    }

    public void setStatus( String s )
    {
        SwingUtilities.invokeLater( () -> status.setText( s ) );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList baseLayers;
    private javax.swing.JList dataSets;
    private javax.swing.JComboBox ddMapLayer;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenuItem gribAction;
    private javax.swing.JMenuItem importAction;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labDataId;
    private javax.swing.JLabel labDataType;
    private javax.swing.JLabel labNoPoints;
    private javax.swing.JLabel labTimestamp;
    private javax.swing.JLabel labTypeOfData;
    private javax.swing.JLabel labZoom;
    private javax.swing.JScrollPane mapScrollPane;
    private javax.swing.JSlider sliderZoom;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
